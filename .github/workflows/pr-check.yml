name: PR Checks
on:
  pull_request:
    branches: [ master ]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect src/ changes
        id: src
        run: |
          BASE=${{ github.event.pull_request.base.sha }}
          HEAD=${{ github.event.pull_request.head.sha }}
          changes=$(git diff --name-only $BASE $HEAD | grep -E '^src/' || true)

          {
            echo "changed<<EOF"
            echo "$changes"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Check VERSION bump
        if: steps.src.outputs.changed != ''
        run: |
          OLD=$(git show "${{ github.event.pull_request.base.sha }}:VERSION")
          NEW=$(cat VERSION)
          if [ "$OLD" = "$NEW" ]; then
            echo "ERROR: src/ changed but VERSION not bumped"
            exit 1
          fi

      - name: Check CHANGELOG
        run: |
          grep -q "^## \[\($(cat VERSION)\)\]" CHANGELOG.md || {
            echo "ERROR: no CHANGELOG entry for $(cat VERSION)"; exit 1
          }

      - name: Check README badge
        run: |
          grep -q "version-v$(cat VERSION)-" README.md || {
            echo "ERROR: README version badge not updated"; exit 1
          }

      - name: Set up Python & install Poetry
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Poetry
        run: pip install poetry

      - name: Ensure lockfile hygiene
        run: |
          for dir in \
            src/common-lib/flint \
            src/catalog-explorer \
            src/kernel \
            src/workspace; do
            poetry lock --directory "$dir"
            git diff --exit-code "$dir/poetry.lock" || {
              echo "ERROR: $dir/poetry.lock is out of date"; exit 1
            }
          done

      - name: Assert LF line endings
        run: |
          matches=$(grep -RIn $'\r' . || true)
          if [ -n "$matches" ]; then
            echo "CRLF detected in these files (file:line:content):"
            echo "$matches"
            exit 1
          fi

      - name: Smoke-test docker-compose stack
        run: |
          pushd src
          cp .env.example .env
          docker compose -f docker-compose.build.yml up -d
          timeout 60 sh -c '
            until curl -sf http://localhost:8701/; do
              sleep 1
            done
          '
          docker compose -f docker-compose.build.yml down
          popd