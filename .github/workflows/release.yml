# .github/workflows/release-detect.yml
name: Detect Release Components
on:
  push:
    branches: [ master ]

jobs:
  detect:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if VERSION changed
        id: check_version
        run: |
          OLD=$(git show "${{ github.event.before }}:VERSION")
          NEW=$(cat VERSION)
          if [ "$OLD" = "$NEW" ]; then
            echo "VERSION unchanged; skipping detection."
            echo "::set-output name=run_detect::false"
          else
            echo "VERSION bumped from $OLD to $NEW"
            echo "::set-output name=run_detect::true"
          fi

      - name: Determine changed services
        id: detect
        if: steps.check_version.outputs.run_detect == 'true'
        run: |
          BASE=${{ github.event.before }}
          HEAD=${{ github.event.after }}
          out=""

          # storage
          if git diff --name-only $BASE $HEAD | grep -q '^src/storage/'; then
            out="${out} storage"
          fi

          # compute-manager
          if git diff --name-only $BASE $HEAD | grep -q '^src/compute-manager/'; then
            out="${out} compute-manager"
          fi

          # experiment-server
          if git diff --name-only $BASE $HEAD | grep -q '^src/experiment-server/'; then
            out="${out} experiment-server"
          fi

          # catalog-explorer
          if git diff --name-only $BASE $HEAD | grep -q '^src/catalog-explorer/'; then
            out="${out} catalog-explorer"
          fi

          # experiment-tracker
          if git diff --name-only $BASE $HEAD | grep -q '^src/experiment-tracker/'; then
            out="${out} experiment-tracker"
          fi

          # workspace
          if git diff --name-only $BASE $HEAD | grep -q '^src/workspace/'; then
            out="${out} workspace"
          fi

          # reverse-proxy
          if git diff --name-only $BASE $HEAD | grep -q '^src/reverse-proxy/'; then
            out="${out} reverse-proxy"
          fi

          echo "services=$out" >> $GITHUB_OUTPUT

      - name: Print services to build
        if: steps.check_version.outputs.run_detect == 'true'
        run: |
          echo "Changed services: ${{ steps.detect.outputs.services }}"
