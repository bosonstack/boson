name: Detect & Publish Release
permissions:
  contents: write
on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if VERSION changed (or manual run)
        id: check_version
        run: |
          OLD=$(git show "${{ github.event.before }}:VERSION" 2>/dev/null || echo "")
          NEW=$(cat VERSION)

          # always export both
          echo "::set-output name=old::$OLD"
          echo "::set-output name=new::$NEW"

          # run if manual dispatch OR bumped
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] \
             || [ "$OLD" != "$NEW" ]; then
            echo "::set-output name=run_detect::true"
          else
            echo "::set-output name=run_detect::false"
          fi

      - name: Determine changed services
        id: detect
        if: steps.check_version.outputs.run_detect == 'true'
        run: |
          BASE=${{ github.event.before }}
          HEAD=${{ github.event.after }}
          out=""

          # storage
          if git diff --name-only $BASE $HEAD | grep -q '^src/storage/'; then
            out="${out} storage"
          fi

          # compute-manager
          if git diff --name-only $BASE $HEAD | grep -q '^src/compute-manager/'; then
            out="${out} compute-manager"
          fi

          # experiment-server
          if git diff --name-only $BASE $HEAD | grep -q '^src/experiment-server/'; then
            out="${out} experiment-server"
          fi

          # catalog-explorer
          if git diff --name-only $BASE $HEAD | grep -q '^src/catalog-explorer/'; then
            out="${out} catalog-explorer"
          fi

          # experiment-tracker
          if git diff --name-only $BASE $HEAD | grep -q '^src/experiment-tracker/'; then
            out="${out} experiment-tracker"
          fi

          # workspace
          if git diff --name-only $BASE $HEAD | grep -q '^src/workspace/'; then
            out="${out} workspace"
          fi

          # reverse-proxy
          if git diff --name-only $BASE $HEAD | grep -q '^src/reverse-proxy/'; then
            out="${out} reverse-proxy"
          fi

          # worker-base
          if git diff --name-only $BASE $HEAD | grep -q '^src/worker-base/'; then
            out="${out} worker-base"
          fi

          # common lib
          if git diff --name-only $BASE $HEAD | grep -q '^src/common-lib/flint/'; then
            out="${out} catalog-explorer workspace worker-base"
          fi

          # dedupe
          services=$(printf "%s\n" $out | sort -u | xargs)
          echo "services=$services" >> $GITHUB_OUTPUT

      - name: Print services to publish
        if: steps.check_version.outputs.run_detect == 'true'
        run: echo "Services to build/publish are ${{ steps.detect.outputs.services }}"

      - name: Set up QEMU & Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Build or retag all services
        if: steps.check_version.outputs.run_detect == 'true'
        run: |
          REG=flintml
          OLD=${{ steps.check_version.outputs.old }}
          NEW=${{ steps.check_version.outputs.new }}
          all=( storage compute-manager experiment-server catalog-explorer experiment-tracker workspace reverse-proxy )
          read -r -a changed <<< "${{ steps.detect.outputs.services }}"

          for svc in "${all[@]}"; do
            build=false
            # rebuild if svc changed
            if printf "%s\n" "${changed[@]}" | grep -xq "$svc"; then
              build=true
            fi
            # rebuild if old image missing
            if ! docker manifest inspect "$REG/$svc:$OLD" >/dev/null 2>&1; then
              build=true
            fi

            if [ "$build" = true ]; then
              echo "ðŸ”¨ Building & pushing $svc:$NEW"

              case "$svc" in
                storage)
                  CTX="src/storage"
                  DOCKERFILE="src/storage/Dockerfile"
                  ;;
                compute-manager)
                  CTX="src/compute-manager"
                  DOCKERFILE="src/compute-manager/Dockerfile"
                  ;;
                experiment-server)
                  CTX="src"
                  DOCKERFILE="src/experiment-server/Dockerfile"
                  ;;
                catalog-explorer)
                  CTX="src"
                  DOCKERFILE="src/catalog-explorer/Dockerfile"
                  ;;
                experiment-tracker)
                  CTX="src/experiment-tracker"
                  DOCKERFILE="src/experiment-tracker/Dockerfile"
                  ;;
                workspace)
                  CTX="src"
                  DOCKERFILE="src/workspace/Dockerfile"
                  ;;
                reverse-proxy)
                  CTX="src/reverse-proxy"
                  DOCKERFILE="src/reverse-proxy/Dockerfile"
                  ;;
                worker-base)
                  CTX="src"
                  DOCKERFILE="src/worker-base/Dockerfile"
                  ;;
              esac

              docker buildx build \
                -t "$REG/$svc:$NEW" \
                -t "$REG/$svc:latest" \
                -f "$DOCKERFILE" "$CTX" --push

            else
              echo "ðŸ”– Retagging $svc:$OLD â†’ $svc:$NEW"
              docker pull "$REG/$svc:$OLD"
              ID=$(docker images --no-trunc -q "$REG/$svc:$OLD")
              docker tag "$ID" "$REG/$svc:$NEW"
              docker push "$REG/$svc:$NEW"
              docker tag "$ID" "$REG/$svc:latest"
              docker push "$REG/$svc:latest"
            fi
          done

      - name: Render compose for release
        if: steps.check_version.outputs.run_detect == 'true'
        run: |
          NEW=${{ steps.check_version.outputs.new }}
          VERSION=$NEW envsubst '${VERSION}' < src/docker-compose.release-template.yml \
            > docker-compose.v${NEW}.yml

      - name: Render worker conf for release
        if: steps.check_version.outputs.run_detect == 'true'
        run: |
          NEW=${{ steps.check_version.outputs.new }}
          VERSION=$NEW envsubst '${VERSION}' < src/worker.release-template.yaml \
            > worker.v${NEW}.yaml

      - name: Render env for release
        if: steps.check_version.outputs.run_detect == 'true'
        run: |
          NEW=${{ steps.check_version.outputs.new }}
          VERSION=$NEW envsubst '${VERSION}' < src/.env.release-template \
            > .env.v${NEW}

      - name: Package release tarball
        if: steps.check_version.outputs.run_detect == 'true'
        run: |
          NEW=${{ steps.check_version.outputs.new }}
          DIR="flintml-v${NEW}"
          mkdir $DIR
          mv docker-compose.v${NEW}.yml $DIR/
          cp .env.v${NEW}   $DIR/.env
          mv worker.v${NEW}.yaml $DIR/
          tar czf flintml.tar.gz $DIR

      - name: Create GitHub Release & Upload Tarball
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.check_version.outputs.new }}
          name: v${{ steps.check_version.outputs.new }}
          files: flintml.tar.gz