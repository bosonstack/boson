# .github/workflows/release-detect.yml
name: Detect Release Components
on:
  push:
    branches: [ master ]

jobs:
  detect:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if VERSION changed
        id: check_version
        run: |
          OLD=$(git show "${{ github.event.before }}:VERSION")
          NEW=$(cat VERSION)
          if [ "$OLD" = "$NEW" ]; then
            echo "VERSION unchanged; skipping detection."
            echo "::set-output name=run_detect::false"
          else
            echo "VERSION bumped from $OLD to $NEW"
            echo "::set-output name=run_detect::true"
          fi

      - name: Determine changed services
        id: detect
        if: steps.check_version.outputs.run_detect == 'true'
        run: |
          BASE=${{ github.event.before }}
          HEAD=${{ github.event.after }}
          out=""

          # storage
          if git diff --name-only $BASE $HEAD | grep -q '^src/storage/'; then
            out="${out} storage"
          fi

          # compute-manager
          if git diff --name-only $BASE $HEAD | grep -q '^src/compute-manager/'; then
            out="${out} compute-manager"
          fi

          # experiment-server
          if git diff --name-only $BASE $HEAD | grep -q '^src/experiment-server/'; then
            out="${out} experiment-server"
          fi

          # catalog-explorer
          if git diff --name-only $BASE $HEAD | grep -q '^src/catalog-explorer/'; then
            out="${out} catalog-explorer"
          fi

          # experiment-tracker
          if git diff --name-only $BASE $HEAD | grep -q '^src/experiment-tracker/'; then
            out="${out} experiment-tracker"
          fi

          # workspace
          if git diff --name-only $BASE $HEAD | grep -q '^src/workspace/'; then
            out="${out} workspace"
          fi

          # reverse-proxy
          if git diff --name-only $BASE $HEAD | grep -q '^src/reverse-proxy/'; then
            out="${out} reverse-proxy"
          fi

          # common lib
          if git diff --name-only $BASE $HEAD | grep -q '^src/common-lib/flint/'; then
            out="${out} catalog-explorer workspace"
          fi

          echo "services=$out" >> $GITHUB_OUTPUT

      - name: Print services to build
        if: steps.check_version.outputs.run_detect == 'true'
        run: |
          echo "Changed services: ${{ steps.detect.outputs.services }}"

      - name: Set up QEMU & Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Build & push changed services
        if: steps.check_version.outputs.run_detect == 'true'
        run: |
          REG=flintml
          NEW=$(cat VERSION)
          # dedupe the list
          changed=( ${{ steps.detect.outputs.services }} )
          services_unique=( $(printf "%s\n" "${changed[@]}" | sort -u) )

          for svc in "${services_unique[@]}"; do
            echo "Building & pushing $svc"
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              -t $REG/$svc:$NEW \
              -t $REG/$svc:latest \
              src/$svc --push
          done

      - name: Retag unchanged services
        if: steps.check_version.outputs.run_detect == 'true'
        run: |
          REG=flintml
          OLD=${{ steps.check_version.outputs.old }}
          NEW=$(cat VERSION)
          all=( storage compute-manager experiment-server catalog-explorer experiment-tracker workspace reverse-proxy )
          # reuse the deduped changed array
          declare -A is_changed
          for svc in "${services_unique[@]}"; do is_changed[$svc]=1; done

          for svc in "${all[@]}"; do
            if [ -z "${is_changed[$svc]}" ]; then
              echo "Retagging $svc from $OLD â†’ $NEW"
              docker pull $REG/$svc:$OLD
              id=$(docker images --no-trunc -q $REG/$svc:$OLD)
              docker tag $id $REG/$svc:$NEW
              docker push $REG/$svc:$NEW
              docker tag $id $REG/$svc:latest
              docker push $REG/$svc:latest
            fi
          done